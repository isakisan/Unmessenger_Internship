CREATE DATABASE ORG;
USE ORG;
CREATE TABLE Customers (
CustomerID INT PRIMARY KEY,
Name VARCHAR(255),
Email VARCHAR(255),
JoinDate DATE
);
CREATE TABLE Products (
ProductID INT PRIMARY KEY,
Name VARCHAR(255),
Category VARCHAR(255),
Price DECIMAL(10, 2)
);
CREATE TABLE Orders (
OrderID INT PRIMARY KEY,
CustomerID INT,
OrderDate DATE,
TotalAmount DECIMAL(10, 2),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
CREATE TABLE OrderDetails (
OrderDetailID INT PRIMARY KEY,
OrderID INT,
ProductID INT,
Quantity INT,
PricePerUnit DECIMAL(10, 2),
FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
INSERT INTO Customers (CustomerID, Name, Email, JoinDate) VALUES
(100, 'John Doe', 'johndoe@gmail.com', '2020-01-10'),
(101, 'Khushi Singh', 'khush67i@outlook.com', '2020-03-04'),
(102, 'Khushi Singhal', 'khushi2002@hotmail.com', '2020-01-10'),
(103, 'Devyansh Mittal', 'devyansh12@gmail.com', '2021-02-15'),
(104, 'Saniya Goel', 'san12@gmail.com', '2021-02-20'),
(105, 'Poonam Singh', 'Poonam99@gmail.com', '2022-03-04'),
(106, 'Aditi Kapoor', 'aditi22@gmail.com', '2022-04-22'),
(107, 'Tushar Khandelwal', 'Tush123@outlook.com', '2022-09-25'),
(108, 'Khushi Kapoor', 'khushiK12@outlook.com', '2023-03-04'),
(109, 'Dev Singhal', 'Dev567@outlook.com', '2020-03-04');

INSERT INTO Products (ProductID, Name, Category, Price) VALUES
(121, 'Laptop', 'Electronics', 999.99),
(122, 'Smarthphone', 'Electronics', 16899.99),
(123, 'Watch', 'Electronics', 899.99),
(124, 'Wallpaper', 'Home Decor', 326.99),
(125, 'Floor Mattress', 'Home Decor', 224.99),
(126, 'Lamp', 'Home Decor', 789.99),
(127, 'Charger', 'Electronics', 1600.99),
(128, 'Hats', 'Accessories', 224.99),
(129, 'Rings', 'Accessories', 19999.99),
(130, 'Card Holders', 'Electronics', 1999.99);

INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES
(1, 100, '2020-02-15', 1499.98),
(2, 101, '2020-02-20', 499.99),
(3, 102, '2020-03-25', 1879.97),
(4, 103, '2019-06-10', 2478.99),
(5, 104, '2019-05-04', 3199.99),
(6, 105, '2021-02-09', 7599.79),
(7, 106, '2021-03-20', 15999.99),
(8, 107, '2021-04-20', 1999.99),
(9, 108, '2023-01-27', 1499.45),
(10, 109, '2022-02-18', 1499.67);

INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductID, Quantity,
PricePerUnit) VALUES
(1261, 1, 121, 2, 999.99),
(1262, 2, 122, 3, 16899.99),
(1263, 3, 123, 7, 899.99),
(1264, 4, 124, 2, 326.99),
(1265, 5, 125, 1, 224.99),
(1266, 6, 126, 4, 789.99),
(1267, 7, 127, 5, 1600.99),
(1268, 8, 128, 2, 224.99),
(1269, 9, 129, 1, 19999.99),
(1270, 10, 130, 1, 1999.99);

# 1.Basic Queries

# 1.1 List all customers
Select * from Customers;

# 1.2. Show all products in the 'Electronics' category
Select * from Products Where Category = "Electronics";

# 1.3. Find the total number of orders placed.
#SELECT  t1.ProductID, t1.Name as ProductName, Category, Quantity, Sum(Quantity)
#as Total_No_Of_OrderPlaced
#FROM  Products as t1, OrderDetails as t2
#where t1.ProductID = t2.ProductID

Select Count(*) as Total_Orders from Orders;

# 1.4. Display the details of the most recent order.
Select * from Orders
Join OrderDetails ON Orders.OrderID = Orderdetails.OrderID
Order BY Orders.OrderDate  DESC
LIMIT 1;

# 2. Joins and Relationships


#2.1. List all products along with the names of the customers who ordered them.

Select Products.ProductID, Products.Name as ProductName, Customers.Name as CustomerName 
from 
Products
Join OrderDetails ON Products.ProductID=OrderDEtails.ProductID
Join Orders ON Orders.OrderID = OrderDetails.OrderID
Join Customers ON Orders.CustomerID = Customers.CustomerID;


#2.2. Show orders that include more than one Product
SELECT
    Orders.OrderID,
    COUNT(OrderDetails.ProductID) AS NumberOfProducts,
    SUM(OrderDetails.Quantity) AS TotalQuantity
FROM
    Orders
JOIN
    OrderDetails ON Orders.OrderID = OrderDetails.OrderID
GROUP BY
    Orders.OrderID
Having NumberOfProducts>1;

# 2.3. Find the total sales amount for each customer.

Select Customers.CustomerID, Customers.Name, SUM(Orders.TotalAmount) as TotalSales from Customers
Join Orders  ON Customers.CustomerID = Orders.CustomerID
Group by Customers.CustomerID,  Customers.Name;


#3. Aggregration and Grouping

#3.1. Calculate the total revenue generated by each product category.
SELECT
    Customers.CustomerID,
    Customers.Name,
    SUM(Orders.TotalAmount) AS TotalSalesAmount
FROM
    Customers
JOIN
    Orders ON Customers.CustomerID = Orders.CustomerID
JOIN
    OrderDetails ON Orders.OrderID = OrderDetails.OrderID
GROUP BY
    Customers.CustomerID, Customers.Name;

# 3.2. Determine the average order value.

SELECT
    AVG(Orders.TotalAmount) AS AverageOrderValue
FROM
    Orders;
    
# 3.3. Find the month with the highest number of orders.
Select
extract(month from OrderDate) as OrderMonth, 
count(OrderID) As NumberOfOrders from Orders
Group by OrderMonth
Order by NumberOfOrders Desc
Limit 1;

#4. Subqueries and Nested Queries:
#4.1. Identify customers who have not placed any orders.
select Customers.CustomerID, Customers.Name
from Customers
Left Join Orders ON Orders.CustomerID= Customers.CustomerID
Where Orders.CustomerID=NULL;

#4.2. Find products that have never been ordered.
Select Products.ProductID, Products.Name from Products
Left Join OrderDetails On Products.ProductID=OrderDetails.ProductID
Where OrderDetails.ProductID is NULL ;

#4.3. Show the top 3 best-selling products.

Select Products.ProductID, Products.Name,  SUM(OrderDetails.Quantity) AS TotalQuantitySold
from Products
Join OrderDetails ON Products.ProductID=OrderDetails.ProductID
Group by Products.ProductID, Products.Name
Order by TotalQuantitySold DESC
Limit  3;

#5. Date and Time Functions:
#5.1. List orders placed in the last month


select
OrderDate, Count( OrderID ) AS TotalOrders, CustomerID from Orders
group by OrderID
having OrderDate> curdate() - interval 1 month
and OrderDate< curdate();


#5.2. Determine the oldest customer in terms of membership duration.

SELECT
    CustomerID,
    Name,
    JoinDate,
    TIMESTAMPDIFF(Year, JoinDate, CURDATE()) AS MembershipDurationInMonths
FROM
    Customers
ORDER BY
    MembershipDurationInMonths Desc
LIMIT 1;

#6. Advanced Queries:
#6.1. Rank customers based on their total spending.
SELECT
    Customers.CustomerID,
    Name,
    SUM(TotalAmount) AS TotalSpending,
    RANK() OVER (ORDER BY SUM(TotalAmount) DESC) AS CustomerRank
FROM
    Customers
JOIN
    Orders ON Customers.CustomerID = Orders.CustomerID
#JOIN
   # OrderDetails ON Orders.OrderID = OrderDetails.OrderID
GROUP BY
    CustomerID, Name
ORDER BY
    TotalSpending DESC;


#6.2. Identify the most popular product category.

SELECT
    Products.ProductID,
    Products.Category,
    SUM(OrderDetails.Quantity) AS TotalQuantitySold
FROM
    Products

JOIN
    OrderDetails ON Products.ProductID = OrderDetails.ProductID
JOIN
    Orders ON OrderDetails.OrderID = Orders.OrderID
GROUP BY
    Products.ProductID, Products.Category
ORDER BY
    TotalQuantitySold DESC
LIMIT 1;



#6.3. Calculate the month-over-month growth rate in sales.


#7. Data Manipulation and Updates:

#7.1. Add a new customer to the Customers table.
INSERT INTO Customers (CustomerID, Name, Email, JoinDate) VALUES
(110, 'Seema Goel', 'seema1213@gmail.com', '2020-01-10');


#7.2. Update the price of a specific product.ProductID
Update Products
set price=549.99
where ProductID = 124;
